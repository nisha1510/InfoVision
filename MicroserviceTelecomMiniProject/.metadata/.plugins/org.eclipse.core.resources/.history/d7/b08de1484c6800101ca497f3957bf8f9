package com.telecom.service;

import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.telecom.entity.Plan;
import com.telecom.exceptions.ResourceNotFoundException;
import com.telecom.repository.PlanRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class PlanService {
	
	@Autowired
	private final PlanRepository repo;

    public List<Plan> getAllPlans() {
    	return repo.findAll(); 
    }

    public Plan getById(Long id) {
        return repo.findById(id).orElseThrow(() -> new RuntimeException("Plan not found"));
    }

    public Plan createPlan(Plan plan) {
    	findByTypeAndValidity(plan);

        Optional<Plan> existing = repo.findByTypeAndValidity(
            plan.getType(), plan.getValidity());

        if (existing.isPresent()) {
            throw new IllegalArgumentException("A plan with this type and validity already exists.");
        }

        return repo.save(plan);
    }

    private void findByTypeAndValidity(Plan plan) {
        if (plan.getType() == null || plan.getType().isBlank()) {
            throw new IllegalArgumentException("Plan type is required.");
        }

        if (plan.getPrice() <= 0) {
            throw new IllegalArgumentException("Plan price must be greater than zero.");
        }

        if (plan.getValidity() == null || plan.getValidity().isBlank()) {
            throw new IllegalArgumentException("Plan validity is required.");
        }

        if (plan.getDescription() == null || plan.getDescription().isBlank()) {
            throw new IllegalArgumentException("Plan description is required.");
        }
    }

    public void deletePlan(Long id) {
        if (!repo.existsById(id)) {
            throw new ResourceNotFoundException("Plan with ID " + id + " does not exist.");
        }
        repo.deleteById(id);
    }

}
