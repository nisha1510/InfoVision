package com.auth.service.security.config;

import java.security.Key;
import java.util.Base64;
import java.util.Date;
import org.springframework.stereotype.Component;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;

@Component
public class JwtUtil {

//    private final String SECRET = "cGZEdU9pN1p5V3hKRmVjTXZxRDFsVW1EcFdjc2pmcG9rZzhUTkZLUFpiNlpjTA==";
//    private final Key key;
	private static final String SECRET_KEY = "735273546D62756C7469446174614B6579536563726574";

//    public JwtUtil() {
//        byte[] keyBytes = Base64.getDecoder().decode(SECRET);
//        this.key = Keys.hmacShaKeyFor(keyBytes); // âœ… Secure key for HS512
//    }

	private Key getSigningKey() {
		byte[] keyBytes = Decoders.BASE64.decode(SECRET_KEY);
		return Keys.hmacShaKeyFor(keyBytes);
	}

	public String generateToken(String username, String role) {
		return Jwts.builder().setSubject(username).claim("role", role).setIssuedAt(new Date(System.currentTimeMillis()))
				.setExpiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME))
				.signWith(getSigningKey(), SignatureAlgorithm.HS256).compact();
	}
//    public String generateToken(String email, String role) {
//        return Jwts.builder()
//                .setSubject(email)
//                .claim("role", role)
//                .setIssuedAt(new Date())
//                .setExpiration(new Date(System.currentTimeMillis() + 86400000))
//                .signWith(SignatureAlgorithm.HS512, key)
//                .compact();
//    }

	public String extractEmail(String token) {
		return Jwts.parser().setSigningKey(SECRET).parseClaimsJws(token).getBody().getSubject();
	}

	public String extractRole(String token) {
		return Jwts.parser().setSigningKey(SECRET).parseClaimsJws(token).getBody().get("role", String.class);
	}

	public boolean isTokenValid(String token, String email) {
		return extractEmail(token).equals(email);
	}
}
